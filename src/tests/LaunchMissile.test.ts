import {LaunchMissileImpl} from "../LaunchMissile";
import {DummyMissile} from "./missiles/DummyMissile";

// Test Doubleは、テストの対象が他のモジュール（クラスや関数など）に依存している場合、その代役として使われるモジュールのことです。
describe('test doubles について', () => {

    // ダミーオブジェクトはテスト中でテスト対象物の利用に必要なコンポーネントの代品です。
    // ただし、ダミーオブジェクトは、スタブ・スパイ・モック・フェイクオブジェクトで挙げた他のものとは異なり、何の機能も備えていません。
    // ダミーオブジェクトはテスト対象の状況を作り出すのに便利ではありますが、テスト対象物がダミーオブジェクトを利用して動くわけではないというのがポイントです。
    describe('ダミーのテスト', () => {
        it('ミサイル発射装置にミサイルがセットできるかどうかテストしたい', () => {
            const dummyMissile = new DummyMissile()
            const launchMissile = new LaunchMissileImpl(dummyMissile)

            expect(() => launchMissile.launch()).toThrowError("これはダミーミサイルです")
        });
    })

    // テストスタブはテスト対象物の依存コンポーネントの代品として動作し、依存コンポーネントがあらかじめ指定したとおりの挙動をします。
    // 挙動というのは「メソッドの戻り値」や「 public なプロパティの値」のことです。
    // 特定の状況下でのテストがやりやすくなります。
    describe('スタブのテスト', () => {
        it('launch() して発射可能なミサイルの場合、発射することを確認したい', () => {
            // ここにコードを記述して下さい

        });

        it('launch() して発射不可能なミサイルの場合、発射できないことを確認したい', () => {
            // ここにコードを記述して下さい

        });
    })

    // テストスパイはテスト対象物の依存コンポーネントの代品として動作し、依存コンポーネントにどのようなアクセスがあったかを記録するものです。
    // コンポーネントへのアクセスというのは「メソッド呼び出し」のことです。
    // 単に呼び出しを記録するだけではなく、記録した内容について検証を行う機能を兼ね備えていることもあります。
    describe('スパイのテスト', () => {
        it('launch() を実行した結果、fire() が呼ばれているか', () => {
            // ここにコードを記述して下さい

        });

        // 下記テストはスタブと同じ内容の意味のテストだが、
        // 実行結果が１０パターンある場合スタブでは１０パターン作成する必要がある。
        // しかしスパイではテスト内で値セットすることで、その問題を解決できる。
        it('launch() を実行した結果、ミサイルが発射できたか（スタブより柔軟に出来る）', () => {
            // ここにコードを記述して下さい

        });

        it('launch() を実行した結果、ミサイルが発射できたか（スタブより柔軟に出来る）', () => {
            // ここにコードを記述して下さい

        });
    })

    // モックオブジェクトはテスト対象物の依存コンポーネントの代品として動作し、リアルタイムにコンポーネントへのアクセスを検証するものです。
    // 基本的な機能はテストスパイと同じですが、テストスパイが対象の処理が終わった後に検証を行うのに対し、
    // モックオブジェクトは対象の処理の途中にリアルタイムに検証を行います。
    // また、モックオブジェクトもテストスパイと同じくスタブの機能を併せ持っていることがあります。
    describe('モックのテスト', () => {
        it('正しいpasswordが設定されている場合、ミサイルを発射する', () => {
            // ここにコードを記述して下さい

        });

        it('正しくないpasswordが設定されている場合、ミサイルを発射しない', () => {
            // ここにコードを記述して下さい

        });
    })

    // フェイクオブジェクトはテスト対象物の依存コンポーネント(関数など)の代品として動作し、本物のコンポーネントと同等の挙動をするものです。
    // ただし、テストスパイやモックオブジェクトとは異なり、フェイクオブジェクトは「検証」のために使用するものではありません。
    // フェイクオブジェクトは次のようなときに使用するものです。
    // 本物のコンポーネントが未実装でまだ利用できない
    // 本物のコンポーネントを使うとデータの変更や削除等の望ましくない副作用が発生する
    // 本物のコンポーネントを使うとテストが大幅に遅くなる
    describe('フェイクのテスト', () => {
        it('正しいpasswordが設定されており、天気APIの結果が雨以外ならミサイルを発射する', async () => {
            // ここにコードを記述して下さい

        });
    })
})
